from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ChatActions
from aiogram.types.web_app_info import WebAppInfo
import asyncio
from baza import Base, engine, db
from models import User

API = '6835397594:AAEE8QKEy8Yx0D-_HRXWGvNLMLDiAUN-V-U'

bot = Bot(API)
disp = Dispatcher(bot=bot)

# –°—é–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–º–∏–Ω 6128986459
admin_users_id = ['930661860']


@disp.message_handler(text='f')
async def edit(message: types.Message):
    await message.answer('dadas')
    user = db.query(User).filter(User.tg_user_id == message.from_user.id).first()
    if user is not None:
        user.sm_penis = 999
        db.commit()
    else:
        await message.answer('–Æ–∑–µ—Ä —É–¥–∞–ª—ë–Ω')

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def on_startap(_):
    Base.metadata.create_all(engine)
    print("–ë–∞–∑–∞-–£—Å–ø–µ—à–Ω–æ!")


@disp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = User()
    user.tg_user_id = message.from_user.id
    user.sm_penis = 17
    db.add(user)
    db.commit()
    
    if str(message.from_user.id) in admin_users_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ üóÇÔ∏è')
        btn2 = types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ üöò')
        btn3 = types.KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è üí≥')
        btn4 = types.KeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è üß≠')
        btn5 = types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ üöó')

        markup.row(btn1, btn2)
        markup.add(btn3)
        markup.row(btn4, btn5)

        await message.answer(
            f"–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–∫–æ–≤–∫–∏:\n\n    User_name: @{message.from_user.username}\n    User_ID: {message.from_user.id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Å—Ç–≤–∏–µ: ", reply_markup=markup)
    else:
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        await asyncio.sleep(0.5)
        await message.answer(f"<b>–ü—Ä–∏–≤–µ—Ç <i>@{message.from_user.username}</i></b> ü§ö", parse_mode='html')
        await message.answer("–≠—Ç–æ –ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –æ—Ç –°–±–µ—Ä\n\n–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–∞—Ä–∫–æ–≤–∫–æ–π –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úçÔ∏è\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /contact</b>", parse_mode='html')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def contact_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    first_button = types.KeyboardButton(text=("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å"), request_contact=True)
    markup.add(first_button)
    return markup
@disp.message_handler(commands=("contact"))
async def share_number(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=await contact_keyboard())
@disp.message_handler(content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    contact = message.contact
    await message.answer(f"–°–ø–∞—Å–∏–±–æ üòâ\n–í–∞—à –Ω–æ–º–µ—Ä üì± +{contact.phone_number} –±—ã–ª –ø–æ–ª—É—á–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
        
@disp.message_handler(lambda message: message.text)
async def commands_button(message: types.Message):
    if message.text == '–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ üóÇÔ∏è':
        
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ä–µ—Ç—å —Ñ–∞–π–ª üóÇÔ∏è', web_app=WebAppInfo(
            url='https://docs.google.com/document/d/1iectXmRwdJojmqtjC4vn7l19ecC5R_7brt863VfwMmo/edit'))
        markup.add(btn1)

        await message.answer("–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –£–ö", reply_markup=markup)

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ üöò':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ì–û–° –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ")
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è üí≥':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –≤–æ–¥–∏–µ–ª—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ")
    elif message.text == '–ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è üß≠':
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤—Ä–µ–º—è –ø–∞—Ä–∫–æ–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ")
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ üöó':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ì–û–° –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ")

executor.start_polling(disp, on_startup=on_startap)
