from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import sqlite3

API = '6835397594:AAEE8QKEy8Yx0D-_HRXWGvNLMLDiAUN-V-U'
storage = MemoryStorage()
bot = Bot(API)
disp = Dispatcher(bot=bot, storage=storage)

class Registration(StatesGroup):
    WaitingForName = State()
    WaitingForLastName = State()
    WaitingForOtchestvo = State()
    WaitingForPhoneNumber = State()

@disp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.finish()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç @{message.from_user.username} ü§ö\n\n–î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ‚úçÔ∏è")
    await message.answer("–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? ")
    await Registration.WaitingForName.set()

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è, —Ñ–∞–º–∏–ª–∏–µ, –æ—Ç—á–µ—Å—Ç–≤–æ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@disp.message_handler(state=Registration.WaitingForName)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
    await Registration.WaitingForLastName.set()

@disp.message_handler(state=Registration.WaitingForLastName)
async def process_last_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_name'] = message.text
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ")
    await Registration.WaitingForOtchestvo.set()
    
@disp.message_handler(state=Registration.WaitingForOtchestvo)
async def process_otchestvo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['otchestvo'] = message.text
    await message.answer("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await Registration.WaitingForPhoneNumber.set()

@disp.message_handler(state=Registration.WaitingForPhoneNumber)
async def process_phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_to_database(data['name'], data['last_name'], data['otchestvo'], data['phone_number'])
    await message.answer("–°–ø–∞—Å–∏–±–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üìã")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_to_database(name, last_name, otchestvo, phone_number):
    db = sqlite3.connect('parkovka.db')
    cursor = db.cursor()
    cursor.execute("INSERT INTO parking (–ò–º—è, –§–∞–º–∏–ª–∏–µ, –û—Ç—á–µ—Å—Ç–≤–æ, –ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞) VALUES (?, ?, ?, ?)", (name, last_name, otchestvo, phone_number))
    db.commit()
    db.close()
    
executor.start_polling(disp)